name: Common Cut a new Minor Release Branch
on:
  workflow_call:
    inputs:
      branch:
        description: 'Branch to use'
        required: true
        type: string
        default: 'main'
      needs_build:
        description: 'Whether to build or not'
        required: true
        type: boolean
        default: false
      needs_export:
        required: false
        type: boolean
        default: false
      build_command:
        description: 'Command to run to build'
        type: string
        required: false
        default: 'npm run build'
      install_command:
        description: 'Command to run to install dependencies'
        type: string
        required: false
      cloud_deploy:
        required: true
        type: boolean
        default: false
      skip_deploy:
        required: false
        type: boolean
        default: false
      include_chart:
        required: false
        type: boolean
        default: true
      needs_docker:
        required: false
        type: boolean
        default: true
      env:
        description: 'Deployment namespace/environment'
        required: false
        type: string
        default: 'quai-sandbox'
      name_override:
        required: false
        type: string
      gcp_project_id:
        required: false
        type: string
      token_secret_name:
        required: false
        type: string
      update_version:
        required: false
        type: boolean
        default: true
      needs_docker_compose:
        required: false
        type: boolean
        default: false
    secrets:
      GH_PAT:
        description: 'needed for github login'
        required: true
      DOCKER:
        description: 'needed for registry login'
        required: false
      KUBE_CONFIG:
        description: 'needed for kube setup'
        required: false
      BUILD_ARGS:
        description: 'needed for build args'
        required: false
      DOCKER_BUILD_ARGS:
        description: 'needed for docker build args'
        required: false
      GPG_PRIVATE_KEY:
        description: 'needed for gpg signing'
        required: false
      GPG_KEY_ID:
        description: 'needed for gpg signing'
        required: false
      GH_GCP_TOKEN:
        description: 'needed for gcp login'
        required: false

jobs:
  detect-language:
    runs-on: ubuntu-latest
    outputs:
      language: ${{ env.detected-language }}

    steps:
      - uses: actions/checkout@v2

      - name: Detect Language
        id: set-language
        run: |
          if [[ -f "package.json" && ! -f "tsconfig.json" ]]; then
            echo "detected-language=javascript" >> $GITHUB_ENV
            echo "detected-language=javascript"
          elif [[ -f "tsconfig.json" ]]; then
            echo "detected-language=typescript" >> $GITHUB_ENV
          elif [[ -f "go.mod" ]]; then
            echo "detected-language=go" >> $GITHUB_ENV
          elif [[ -f "mix.exs" ]]; then
            echo "detected-language=elixir" >> $GITHUB_ENV
          else
            echo "detected-language=unknown" >> $GITHUB_ENV
          fi
          echo "testing"

  cutReleaseCandidateJS:
    needs: detect-language
    runs-on: ubuntu-latest
    outputs:
        branch: ${{ steps.set-branch.outputs.branch }}
    if: needs.detect-language.outputs.language == 'javascript'
    steps:
      - uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.GH_PAT }}

      - name: Import GPG Key
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
        run: |
          echo "$GPG_PRIVATE_KEY" | gpg --import
          git config --global user.signingkey $GPG_KEY_ID
          git config --global commit.gpgsign true
          # Configure Git with CI account details
          git config --global user.name "ci-dominantstrategies"
          git config --global user.email "ci@dominantstrategies.io"
          
          # Optionally, check that the GPG key is correctly configured for signing
          gpg --list-keys "ci@dominantstrategies.io"

      - name: Install jq
        if: ${{ inputs.update_version }}
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Set Repo Name
        run: |
          repo_name=$(basename ${{ github.repository }})
          if [ -n "${{ inputs.name_override }}" ]; then
              repo_name=${{ inputs.name_override }}
          fi
          echo "REPO_NAME=$repo_name" >> $GITHUB_ENV

      - name: Set Repo Name in Camel Case
        run: |
          repo_name=$(basename ${{ github.repository }})
          if [ -n "${{ inputs.name_override }}" ]; then
              repo_name=${{ inputs.name_override }}
          fi
          camel_case_name=$(echo $repo_name | awk -F- '{for(i=2; i<=NF; i++) $i=toupper(substr($i,1,1)) substr($i,2); }1' OFS="")
          echo "CAMEL_CASE_REPO_NAME=$camel_case_name" >> $GITHUB_ENV

      - name: Install Volta
        run: |
          curl -sSLf https://get.volta.sh | bash
          echo "$HOME/.volta/bin" >> $GITHUB_PATH

      - name: Log Node and Npm Versions
        run:  |
          echo node version $(node -v)
          echo npm version $(npm -v)

      - name: install semver globally
        if: ${{ inputs.update_version }}
        run: npm install -g semver

      - name: Update Version
        if: ${{ inputs.update_version }}
        run: |
          jq --arg new_version "v$(npx semver -i patch $(jq -r '.version' package.json | sed 's/^v//'))" '.version = $new_version' package.json > temp.json && mv temp.json package.json
          NEW_VERSION=$(jq -r '.version' package.json)
          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Update Chart.yaml version
        if: ${{ inputs.include_chart }}
        run: yq eval -P -i ".appVersion=\"${{ env.VERSION }}\"" ./helm/Chart.yaml

      - name: Update values.yaml version
        if: ${{ inputs.include_chart }}
        run: yq eval -P -i ".${{ env.CAMEL_CASE_REPO_NAME }}.image.version=\"${{ env.VERSION }}\"" ./helm/values.yaml

      - name: Update version environment variable
        run: echo "VERSION=$(echo $VERSION | sed 's/\.[0-9]*$//')" >> $GITHUB_ENV

      - name: Store version in branch variable
        id: set-branch
        run: echo "branch=${{ env.VERSION }}" >> $GITHUB_OUTPUT

      - uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Release ${{ env.VERSION }}
          branch: ${{ env.VERSION }}
          create_branch: true
          commit_user_name: ci-dominantstrategies
          commit_user_email: ci@dominantstrategies.io

      - uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.GH_PAT }}

      - name: Set Repo Name
        run: |
          repo_name=$(basename ${{ github.repository }})
          if [ -n "${{ inputs.name_override }}" ]; then
              repo_name=${{ inputs.name_override }}
          fi
          echo "REPO_NAME=$repo_name" >> $GITHUB_ENV

      - name: Set Repo Name in Camel Case
        run: |
          repo_name=$(basename ${{ github.repository }})
          if [ -n "${{ inputs.name_override }}" ]; then
              repo_name=${{ inputs.name_override }}
          fi
          camel_case_name=$(echo $repo_name | awk -F- '{for(i=2; i<=NF; i++) $i=toupper(substr($i,1,1)) substr($i,2); }1' OFS="")
          echo "CAMEL_CASE_REPO_NAME=$camel_case_name" >> $GITHUB_ENV

      - name: Update Version
        if: ${{ inputs.update_version }}
        run: |
          jq --arg new_version "v$(npx semver -i minor $(jq -r '.version' package.json | sed 's/^v//;s/-pre$//'))-pre" '.version = $new_version' package.json > temp.json && mv temp.json package.json
          NEW_VERSION=$(jq -r '.version' package.json)
          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Sync package-lock.json
        run: npm i --package-lock-only --ignore-scripts

      - name: Update Chart.yaml version
        if: ${{ inputs.include_chart }}
        run: yq eval -P -i ".appVersion=\"${{ env.VERSION }}\"" ./helm/Chart.yaml

      - name: Update values.yaml version
        if: ${{ inputs.include_chart }}
        run: yq eval -P -i ".${{ env.CAMEL_CASE_REPO_NAME }}.image.version=\"${{ env.VERSION }}\"" ./helm/values.yaml

      - uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Rev'd main to Release ${{ env.VERSION }}
          branch: ${{ inputs.branch }}
          commit_user_name: ci-dominantstrategies
          commit_user_email: ci@dominantstrategies.io

  cutReleaseCandidateTS:
    needs: detect-language
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.set-branch.outputs.branch }}
    if: needs.detect-language.outputs.language == 'typescript'
    steps:
      - uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.GH_PAT }}

      - name: Import GPG Key
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
        run: |
          echo "$GPG_PRIVATE_KEY" | gpg --import
          git config --global user.signingkey $GPG_KEY_ID
          git config --global commit.gpgsign true
          # Configure Git with CI account details
          git config --global user.name "ci-dominantstrategies"
          git config --global user.email "ci@dominantstrategies.io"
          
          # Optionally, check that the GPG key is correctly configured for signing
          gpg --list-keys "ci@dominantstrategies.io"

      - name: Install jq
        if: ${{ inputs.update_version }}
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Set Repo Name
        run: |
          repo_name=$(basename ${{ github.repository }})
          if [ -n "${{ inputs.name_override }}" ]; then
              repo_name=${{ inputs.name_override }}
          fi
          echo "REPO_NAME=$repo_name" >> $GITHUB_ENV

      - name: Set Repo Name in Camel Case
        run: |
          repo_name=$(basename ${{ github.repository }})
          if [ -n "${{ inputs.name_override }}" ]; then
              repo_name=${{ inputs.name_override }}
          fi
          camel_case_name=$(echo $repo_name | awk -F- '{for(i=2; i<=NF; i++) $i=toupper(substr($i,1,1)) substr($i,2); }1' OFS="")
          echo "CAMEL_CASE_REPO_NAME=$camel_case_name" >> $GITHUB_ENV

      - name: Install Volta
        run: |
          curl -sSLf https://get.volta.sh | bash
          echo "$HOME/.volta/bin" >> $GITHUB_PATH

      - name: Log Node and Npm Versions
        run:  |
          echo node version $(node -v)
          echo npm version $(npm -v)

      - name: install semver globally
        if: ${{ inputs.update_version }}
        run: npm install -g semver

      - name: Update Version
        if: ${{ inputs.update_version }}
        run: |
          jq --arg new_version "v$(npx semver -i patch $(jq -r '.version' package.json | sed 's/^v//'))" '.version = $new_version' package.json > temp.json && mv temp.json package.json
          NEW_VERSION=$(jq -r '.version' package.json)
          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Update Chart.yaml version
        if: ${{ inputs.include_chart }}
        run: yq eval -P -i ".appVersion=\"${{ env.VERSION }}\"" ./helm/Chart.yaml

      - name: Update values.yaml version
        if: ${{ inputs.include_chart }}
        run: yq eval -P -i ".${{ env.CAMEL_CASE_REPO_NAME }}.image.version=\"${{ env.VERSION }}\"" ./helm/values.yaml

      - name: Update version environment variable
        run: echo "VERSION=$(echo $VERSION | sed 's/\.[0-9]*$//')" >> $GITHUB_ENV

      - name: Store version in branch variable
        id: set-branch
        run: echo "branch=${{ env.VERSION }}" >> $GITHUB_OUTPUT

      - uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Release ${{ env.VERSION }}
          branch: ${{ env.VERSION }}
          create_branch: true
          commit_user_name: ci-dominantstrategies
          commit_user_email: ci@dominantstrategies.io

      - uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.GH_PAT }}

      - name: Set Repo Name
        run: |
          repo_name=$(basename ${{ github.repository }})
          if [ -n "${{ inputs.name_override }}" ]; then
              repo_name=${{ inputs.name_override }}
          fi
          echo "REPO_NAME=$repo_name" >> $GITHUB_ENV

      - name: Set Repo Name in Camel Case
        run: |
          repo_name=$(basename ${{ github.repository }})
          if [ -n "${{ inputs.name_override }}" ]; then
              repo_name=${{ inputs.name_override }}
          fi
          camel_case_name=$(echo $repo_name | awk -F- '{for(i=2; i<=NF; i++) $i=toupper(substr($i,1,1)) substr($i,2); }1' OFS="")
          echo "CAMEL_CASE_REPO_NAME=$camel_case_name" >> $GITHUB_ENV

      - name: Update Version
        if: ${{ inputs.update_version }}
        run: |
          jq --arg new_version "v$(npx semver -i minor $(jq -r '.version' package.json | sed 's/^v//;s/-pre$//'))-pre" '.version = $new_version' package.json > temp.json && mv temp.json package.json
          NEW_VERSION=$(jq -r '.version' package.json)
          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Sync package-lock.json
        run: npm i --package-lock-only --ignore-scripts

      - name: Update Chart.yaml version
        if: ${{ inputs.include_chart }}
        run: yq eval -P -i ".appVersion=\"${{ env.VERSION }}\"" ./helm/Chart.yaml

      - name: Update values.yaml version
        if: ${{ inputs.include_chart }}
        run: yq eval -P -i ".${{ env.CAMEL_CASE_REPO_NAME }}.image.version=\"${{ env.VERSION }}\"" ./helm/values.yaml

      - uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Rev'd main to Release ${{ env.VERSION }}
          branch: ${{ inputs.branch }}
          commit_user_name: ci-dominantstrategies
          commit_user_email: ci@dominantstrategies.io

  cutReleaseCandidateGo:
    needs: detect-language
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.set-branch.outputs.branch }}
    if: needs.detect-language.outputs.language == 'go'
    steps:
      - uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.GH_PAT }}

      - name: Import GPG Key
        if: ${{ inputs.update_version }}
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
        run: |
          echo "$GPG_PRIVATE_KEY" | gpg --import
          git config --global user.signingkey $GPG_KEY_ID
          git config --global commit.gpgsign true
          # Configure Git with CI account details
          git config --global user.name "ci-dominantstrategies"
          git config --global user.email "ci@dominantstrategies.io"
          
          # Optionally, check that the GPG key is correctly configured for signing
          gpg --list-keys "ci@dominantstrategies.io"

      - name: Set Repo Name
        run: |
          repo_name=$(basename ${{ github.repository }})
          if [ -n "${{ inputs.name_override }}" ]; then
              repo_name=${{ inputs.name_override }}
          fi
          echo "REPO_NAME=$repo_name" >> $GITHUB_ENV

      - name: Set Repo Name in Camel Case
        run: |
          repo_name=$(basename ${{ github.repository }})
          if [ -n "${{ inputs.name_override }}" ]; then
              repo_name=${{ inputs.name_override }}
          fi
          camel_case_name=$(echo $repo_name | awk -F- '{for(i=2; i<=NF; i++) $i=toupper(substr($i,1,1)) substr($i,2); }1' OFS="")
          echo "CAMEL_CASE_REPO_NAME=$camel_case_name" >> $GITHUB_ENV

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20' # This will install the latest stable Node.js version

      - name: Log Node and Npm Versions
        run:  |
          echo node version $(node -v)
          echo npm version $(npm -v)

      - name: install semver globally
        run: npm install -g semver

      - name: Debug deploy config
        run: |
          echo cloud_deploy: ${{ inputs.cloud_deploy }}
          echo skip_deploy: ${{ inputs.skip_deploy }}
          echo env: ${{ inputs.env }}

      - name: Update Version
        if: ${{ inputs.update_version }}
        run: |
          echo "v$(semver -i patch $(sed 's/^v//' VERSION))" > VERSION
          echo "VERSION=$(cat VERSION)" >> $GITHUB_ENV

##      - name: Update Chart.yaml version
##        if: ${{ inputs.include_chart }}
##        run: yq eval -P -i ".appVersion=\"${{ env.VERSION }}\"" ./helm/Chart.yaml
##
##      - name: Update values.yaml version
##        if: ${{ inputs.include_chart }}
##        run: yq eval -P -i ".${{ env.CAMEL_CASE_REPO_NAME }}.image.version=\"${{ env.VERSION }}\"" ./helm/values.yaml

      - name: Update version environment variable
        run: echo "VERSION=$(echo $VERSION | sed 's/\.[0-9]*$//')" >> $GITHUB_ENV

      - name: Store version in branch variable
        id: set-branch
        run: echo "branch=${{ env.VERSION }}" >> $GITHUB_OUTPUT

      - uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Release ${{ env.VERSION }}
          branch: ${{ env.VERSION }}
          create_branch: true
          commit_user_name: ci-dominantstrategies
          commit_user_email: ci@dominantstrategies.io

      - uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.GH_PAT }}

      - name: Set Repo Name
        run: |
          repo_name=$(basename ${{ github.repository }})
          if [ -n "${{ inputs.name_override }}" ]; then
              repo_name=${{ inputs.name_override }}
          fi
          echo "REPO_NAME=$repo_name" >> $GITHUB_ENV

      - name: Set Repo Name in Camel Case
        run: |
          repo_name=$(basename ${{ github.repository }})
          if [ -n "${{ inputs.name_override }}" ]; then
              repo_name=${{ inputs.name_override }}
          fi
          camel_case_name=$(echo $repo_name | awk -F- '{for(i=2; i<=NF; i++) $i=toupper(substr($i,1,1)) substr($i,2); }1' OFS="")
          echo "CAMEL_CASE_REPO_NAME=$camel_case_name" >> $GITHUB_ENV

      - name: Update Version
        if: ${{ inputs.update_version }}
        run: |
          echo "v$(semver -i minor $(cat VERSION | sed 's/^v//;s/-pre$//'))-pre" > VERSION
          echo "VERSION=$(cat VERSION)" >> $GITHUB_ENV

##      - name: Update Chart.yaml version
##        if: ${{ inputs.include_chart }}
##        run: yq eval -P -i ".appVersion=\"${{ env.VERSION }}\"" ./helm/Chart.yaml
##
##      - name: Update values.yaml version
##        if: ${{ inputs.include_chart }}
##        run: yq eval -P -i ".${{ env.CAMEL_CASE_REPO_NAME }}.image.version=\"${{ env.VERSION }}\"" ./helm/values.yaml

      - uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Rev'd main to Release ${{ env.VERSION }}
          branch: ${{ inputs.branch }}
          commit_user_name: ci-dominantstrategies
          commit_user_email: ci@dominantstrategies.io

  deployReleaseCandidateJS:
    uses: ./.github/workflows/build-deploy-js.yml
    needs: [cutReleaseCandidateJS]
    if: needs.detect-language.outputs.language == 'javascript'
    secrets:
      DOCKER: ${{ secrets.DOCKER }}
      GH_PAT: ${{ secrets.GH_PAT }}
      KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
      DOCKER_BUILD_ARGS: ${{ secrets.DOCKER_BUILD_ARGS }}
      BUILD_ARGS: ${{ secrets.BUILD_ARGS }}
      GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
      GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
      GH_GCP_TOKEN: ${{ secrets.GH_GCP_TOKEN }}

    with:
      env: ${{ inputs.env }}
      update_version_command: "jq --arg new_version \"v$(npx semver -i patch $(jq -r '.version' package.json | sed 's/^v//'))\" '.version = $new_version' package.json > temp.json && mv temp.json package.json"
      branch: ${{ needs.cutReleaseCandidateJS.outputs.branch }}
      rails: '[[ ! "$VERSION" =~ "rc" ]]'
      update_version: true
      cloud_deploy: ${{ inputs.cloud_deploy }}
      needs_build: ${{ inputs.needs_build }}
      needs_export: ${{ inputs.needs_export }}
      install_command: ${{ inputs.install_command }}
      skip_deploy: ${{ inputs.skip_deploy }}
      name_override: ${{ inputs.name_override }}
      gcp_project_id: ${{ inputs.gcp_project_id }}
      token_secret_name: ${{ inputs.token_secret_name }}
      needs_docker: ${{ inputs.needs_docker }}
      build_command: ${{ inputs.build_command }}
      include_chart: ${{ inputs.include_chart }}
      needs_docker_compose: ${{ inputs.needs_docker_compose }}



  deployReleaseCandidateTS:
    uses: ./.github/workflows/build-deploy-ts.yml
    if: needs.detect-language.outputs.language == 'typescript'
    needs: [cutReleaseCandidateTS]
    secrets:
      DOCKER: ${{ secrets.DOCKER }}
      GH_PAT: ${{ secrets.GH_PAT }}
      KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
      DOCKER_BUILD_ARGS: ${{ secrets.DOCKER_BUILD_ARGS }}
      BUILD_ARGS: ${{ secrets.BUILD_ARGS }}
      GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
      GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
      GH_GCP_TOKEN: ${{ secrets.GH_GCP_TOKEN }}

    with:
      env: ${{ inputs.env }}
      update_version_command: "jq --arg new_version \"v$(npx semver -i patch $(jq -r '.version' package.json | sed 's/^v//'))\" '.version = $new_version' package.json > temp.json && mv temp.json package.json"
      branch: ${{ needs.cutReleaseCandidateTS.outputs.branch }}
      rails: '[[ ! "$VERSION" =~ "rc" ]]'
      update_version: true
      cloud_deploy: ${{ inputs.cloud_deploy }}
      needs_build: ${{ inputs.needs_build }}
      needs_export: ${{ inputs.needs_export }}
      install_command: ${{ inputs.install_command }}
      skip_deploy: ${{ inputs.skip_deploy }}
      name_override: ${{ inputs.name_override }}
      gcp_project_id: ${{ inputs.gcp_project_id }}
      token_secret_name: ${{ inputs.token_secret_name }}
      needs_docker: ${{ inputs.needs_docker }}
      build_command: ${{ inputs.build_command }}
      include_chart: ${{ inputs.include_chart }}
      needs_docker_compose: ${{ inputs.needs_docker_compose }}

  deployReleaseCandidateGo:
    uses: ./.github/workflows/build-deploy-go.yml
    needs: [cutReleaseCandidateGo]
    if: needs.detect-language.outputs.language == 'go'
    secrets:
      DOCKER: ${{ secrets.DOCKER }}
      GH_PAT: ${{ secrets.GH_PAT }}
      KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
      DOCKER_BUILD_ARGS: ${{ secrets.DOCKER_BUILD_ARGS }}
      BUILD_ARGS: ${{ secrets.BUILD_ARGS }}
      GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
      GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
      GH_GCP_TOKEN: ${{ secrets.GH_GCP_TOKEN }}
    with:
      env: ${{ inputs.env }}
      update_version_command: "echo \"v$(semver -i patch $(sed 's/^v//' VERSION))\" > VERSION"
      branch: ${{ needs.cutReleaseCandidateGo.outputs.branch }}
      rails: '[[ ! "$VERSION" =~ "rc" ]]'
      update_version: true
      cloud_deploy: ${{ inputs.cloud_deploy }}
      needs_build: ${{ inputs.needs_build }}
      install_command: ${{ inputs.install_command }}
      skip_deploy: ${{ inputs.skip_deploy }}
      build_command: ${{ inputs.build_command }}
      needs_docker: ${{ inputs.needs_docker }}
      include_chart: ${{ inputs.include_chart }}
      name_override: ${{ inputs.name_override }}
      gcp_project_id: ${{ inputs.gcp_project_id }}
      token_secret_name: ${{ inputs.token_secret_name }}

