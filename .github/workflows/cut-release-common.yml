name: Common Cut a new Minor Release Branch
on:
  workflow_call:
    inputs:
      branch:
        description: 'Branch to use'
        required: true
        type: string
        default: 'main'
      needs_build:
        description: 'Whether to build or not'
        required: true
        type: boolean
        default: false
      build_command:
        description: 'Command to run to build'
        type: string
        required: false
      install_command:
        description: 'Command to run to install dependencies'
        type: string
        required: false
      cloud_deploy:
        required: true
        type: boolean
        default: false
      skip_deploy:
        required: false
        type: boolean
        default: false
      include_chart:
        required: false
        type: boolean
        default: false
      needs_docker:
        required: false
        type: boolean
        default: false
      env:
        description: 'Deployment namespace/environment'
        required: false
        type: string
        default: 'quai-sandbox'
    secrets:
      GH_PAT:
        description: 'needed for github login'
        required: true
      DOCKER:
        description: 'needed for registry login'
        required: false
      KUBE_CONFIG:
        description: 'needed for kube setup'
        required: false
      BUILD_ARGS:
        description: 'needed for build args'
        required: false
      DOCKER_BUILD_ARGS:
        description: 'needed for docker build args'
        required: false

jobs:
  detect-language:
    runs-on: ubuntu-latest
    outputs:
      language: ${{ env.detected-language }}

    steps:
      - uses: actions/checkout@v2

      - name: Detect Language
        id: set-language
        run: |
          if [[ -f "package.json" && ! -f "tsconfig.json" ]]; then
            echo "detected-language=javascript" >> $GITHUB_ENV
            echo "detected-language=javascript"
          elif [[ -f "tsconfig.json" ]]; then
            echo "detected-language=typescript" >> $GITHUB_ENV
          elif [[ -f "go.mod" ]]; then
            echo "detected-language=go" >> $GITHUB_ENV
          elif [[ -f "mix.exs" ]]; then
            echo "detected-language=elixir" >> $GITHUB_ENV
          else
            echo "detected-language=unknown" >> $GITHUB_ENV
          fi
          echo "testing"

  cutReleaseCandidateJS:
    needs: detect-language
    runs-on: ubuntu-latest
    outputs:
        branch: ${{ steps.set-branch.outputs.branch }}
    if: needs.detect-language.outputs.language == 'javascript'
    steps:
      - uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.GH_PAT }}

      - name: Set Repo Name
        run: echo "REPO_NAME=$(basename ${{ github.repository }})" >> $GITHUB_ENV

      - name: Set Repo Name in Camel Case
        run: |
          repo_name=$(basename ${{ github.repository }})
          camel_case_name=$(echo $repo_name | awk -F- '{for(i=2; i<=NF; i++) $i=toupper(substr($i,1,1)) substr($i,2); }1' OFS="")
          echo "CAMEL_CASE_REPO_NAME=$camel_case_name" >> $GITHUB_ENV


      - name: Install Volta
        run: |
          curl -sSLf https://get.volta.sh | bash
          echo "$HOME/.volta/bin" >> $GITHUB_PATH

      - name: Log Node and Npm Versions
        run:  |
          echo node version $(node -v)
          echo npm version $(npm -v)

      - name: Update Version
        run: |
          NEW_VERSION=$(npm version prerelease --preid=rc --no-git-tag-version | sed 's/^v//')
          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Update Chart.yaml version
        run: yq eval -P -i ".appVersion=\"${{ env.VERSION }}\"" ./helm/Chart.yaml

      - name: Update values.yaml version
        run: yq eval -P -i ".${{ env.CAMEL_CASE_REPO_NAME }}.image.version=\"${{ env.VERSION }}\"" ./helm/values.yaml

      - name: Update version environment variable
        run: echo "VERSION=$(echo $VERSION | sed 's/\.[0-9]*-.*//g')" >> $GITHUB_ENV

      - name: Store version in branch variable
        id: set-branch
        run: echo "branch=${{ env.VERSION }}" >> $GITHUB_OUTPUT

      - uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Release ${{ env.VERSION }}
          branch: ${{ env.VERSION }}
          create_branch: true

      - uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.GH_PAT }}

      - name: Set Repo Name
        run: echo "REPO_NAME=$(basename ${{ github.repository }})" >> $GITHUB_ENV

      - name: Set Repo Name in Camel Case
        run: |
          repo_name=$(basename ${{ github.repository }})
          camel_case_name=$(echo $repo_name | awk -F- '{for(i=2; i<=NF; i++) $i=toupper(substr($i,1,1)) substr($i,2); }1' OFS="")
          echo "CAMEL_CASE_REPO_NAME=$camel_case_name" >> $GITHUB_ENV

      - name: Update Version
        run: |
          NEW_VERSION=$(npm version preminor --preid=pre --no-git-tag-version | sed 's/^v//')
          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Sync package-lock.json
        run: npm i --package-lock-only --ignore-scripts

      - name: Update Chart.yaml version
        run: yq eval -P -i ".appVersion=\"${{ env.VERSION }}\"" ./helm/Chart.yaml

      - name: Update values.yaml version
        run: yq eval -P -i ".${{ env.CAMEL_CASE_REPO_NAME }}.image.version=\"${{ env.VERSION }}\"" ./helm/values.yaml

      - uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Rev'd main to Release ${{ env.VERSION }}
          branch: main

  cutReleaseCandidateTS:
    needs: detect-language
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.set-branch.outputs.branch }}
    if: needs.detect-language.outputs.language == 'typescript'
    steps:
      - uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.GH_PAT }}

      - name: Set Repo Name
        run: echo "REPO_NAME=$(basename ${{ github.repository }})" >> $GITHUB_ENV

      - name: Set Repo Name in Camel Case
        run: |
          repo_name=$(basename ${{ github.repository }})
          camel_case_name=$(echo $repo_name | awk -F- '{for(i=2; i<=NF; i++) $i=toupper(substr($i,1,1)) substr($i,2); }1' OFS="")
          echo "CAMEL_CASE_REPO_NAME=$camel_case_name" >> $GITHUB_ENV


      - name: Install Volta
        run: |
          curl -sSLf https://get.volta.sh | bash
          echo "$HOME/.volta/bin" >> $GITHUB_PATH

      - name: Log Node and Npm Versions
        run:  |
          echo node version $(node -v)
          echo npm version $(npm -v)

      - name: Update Version
        run: |
          NEW_VERSION=$(npm version prerelease --preid=rc --no-git-tag-version | sed 's/^v//')
          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Update Chart.yaml version
        run: yq eval -P -i ".appVersion=\"${{ env.VERSION }}\"" ./helm/Chart.yaml

      - name: Update values.yaml version
        run: yq eval -P -i ".${{ env.CAMEL_CASE_REPO_NAME }}.image.version=\"${{ env.VERSION }}\"" ./helm/values.yaml

      - name: Update version environment variable
        run: echo "VERSION=$(echo $VERSION | sed 's/\.[0-9]*-.*//g')" >> $GITHUB_ENV

      - name: Store version in branch variable
        id: set-branch
        run: echo "branch=${{ env.VERSION }}" >> $GITHUB_OUTPUT

      - uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Release ${{ env.VERSION }}
          branch: ${{ env.VERSION }}
          create_branch: true

      - uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.GH_PAT }}

      - name: Set Repo Name
        run: echo "REPO_NAME=$(basename ${{ github.repository }})" >> $GITHUB_ENV

      - name: Set Repo Name in Camel Case
        run: |
          repo_name=$(basename ${{ github.repository }})
          camel_case_name=$(echo $repo_name | awk -F- '{for(i=2; i<=NF; i++) $i=toupper(substr($i,1,1)) substr($i,2); }1' OFS="")
          echo "CAMEL_CASE_REPO_NAME=$camel_case_name" >> $GITHUB_ENV

      - name: Update Version
        run: |
          NEW_VERSION=$(npm version preminor --preid=pre --no-git-tag-version | sed 's/^v//')
          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Sync package-lock.json
        run: npm i --package-lock-only --ignore-scripts

      - name: Update Chart.yaml version
        run: yq eval -P -i ".appVersion=\"${{ env.VERSION }}\"" ./helm/Chart.yaml

      - name: Update values.yaml version
        run: yq eval -P -i ".${{ env.CAMEL_CASE_REPO_NAME }}.image.version=\"${{ env.VERSION }}\"" ./helm/values.yaml

      - uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Rev'd main to Release ${{ env.VERSION }}
          branch: main

  cutReleaseCandidateGo:
    needs: detect-language
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.set-branch.outputs.branch }}
    if: needs.detect-language.outputs.language == 'go'
    steps:
      - uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.GH_PAT }}

      - name: Set Repo Name
        run: echo "REPO_NAME=$(basename ${{ github.repository }})" >> $GITHUB_ENV

      - name: Set Repo Name in Camel Case
        run: |
          repo_name=$(basename ${{ github.repository }})
          camel_case_name=$(echo $repo_name | awk -F- '{for(i=2; i<=NF; i++) $i=toupper(substr($i,1,1)) substr($i,2); }1' OFS="")
          echo "CAMEL_CASE_REPO_NAME=$camel_case_name" >> $GITHUB_ENV

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20' # This will install the latest stable Node.js version

      - name: Log Node and Npm Versions
        run:  |
          echo node version $(node -v)
          echo npm version $(npm -v)

      - name: install semver globally
        run: npm install -g semver

      - name: Debug deploy config
        run: |
          echo cloud_deploy: ${{ inputs.cloud_deploy }}
          echo skip_deploy: ${{ inputs.skip_deploy }}
          echo env: ${{ inputs.env }}

      - name: Update Version
        run: |
          echo "v$(semver -i patch $(sed 's/^v//' VERSION))" > VERSION
          echo "VERSION=$(cat VERSION)" >> $GITHUB_ENV

      - name: Update Chart.yaml version
        if: ${{ inputs.include_chart }}
        run: yq eval -P -i ".appVersion=\"${{ env.VERSION }}\"" ./helm/Chart.yaml

      - name: Update values.yaml version
        if: ${{ inputs.include_chart }}
        run: yq eval -P -i ".${{ env.CAMEL_CASE_REPO_NAME }}.image.version=\"${{ env.VERSION }}\"" ./helm/values.yaml

      - name: Update version environment variable
        run: echo "VERSION=$(echo $VERSION | sed 's/\.[0-9]*$//')" >> $GITHUB_ENV

      - name: Store version in branch variable
        id: set-branch
        run: echo "branch=${{ env.VERSION }}" >> $GITHUB_OUTPUT

      - uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Release ${{ env.VERSION }}
          branch: ${{ env.VERSION }}
          create_branch: true

      - uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.GH_PAT }}

      - name: Set Repo Name
        run: echo "REPO_NAME=$(basename ${{ github.repository }})" >> $GITHUB_ENV

      - name: Set Repo Name in Camel Case
        run: |
          repo_name=$(basename ${{ github.repository }})
          camel_case_name=$(echo $repo_name | awk -F- '{for(i=2; i<=NF; i++) $i=toupper(substr($i,1,1)) substr($i,2); }1' OFS="")
          echo "CAMEL_CASE_REPO_NAME=$camel_case_name" >> $GITHUB_ENV

      - name: Update Version
        run: |
          echo "v$(semver -i preminor $(sed 's/^v//' VERSION))-pre" > VERSION
          echo "VERSION=$(cat VERSION)" >> $GITHUB_ENV

      - name: Update Chart.yaml version
        if: ${{ inputs.include_chart }}
        run: yq eval -P -i ".appVersion=\"${{ env.VERSION }}\"" ./helm/Chart.yaml

      - name: Update values.yaml version
        if: ${{ inputs.include_chart }}
        run: yq eval -P -i ".${{ env.CAMEL_CASE_REPO_NAME }}.image.version=\"${{ env.VERSION }}\"" ./helm/values.yaml

      - uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Rev'd main to Release ${{ env.VERSION }}
          branch: main

  deployReleaseCandidateJS:
    uses: ./.github/workflows/build-deploy-js.yml
    needs: [cutReleaseCandidateJS]
    if: needs.detect-language.outputs.language == 'javascript'
    secrets:
      DOCKER: ${{ secrets.DOCKER }}
      GH_PAT: ${{ secrets.GH_PAT }}
      KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
      DOCKER_BUILD_ARGS: ${{ secrets.DOCKER_BUILD_ARGS }}
      BUILD_ARGS: ${{ secrets.BUILD_ARGS }}
    with:
      env: ${{ inputs.env }}
      update_version_command: npm version prerelease --preid=rc --no-git-tag-version
      branch: ${{ needs.cutReleaseCandidateJS.outputs.branch }}
      rails: '[[ "$VERSION" =~ "rc" ]]'
      update_version: true
      cloud_deploy: ${{ inputs.cloud_deploy }}
      needs_build: ${{ inputs.needs_build }}
      install_command: ${{ inputs.install_command }}
      skip_deploy: ${{ inputs.skip_deploy }}

  deployReleaseCandidateTS:
    uses: ./.github/workflows/build-deploy-ts.yml
    if: needs.detect-language.outputs.language == 'typescript'
    needs: [cutReleaseCandidateTS]
    secrets:
      DOCKER: ${{ secrets.DOCKER }}
      GH_PAT: ${{ secrets.GH_PAT }}
      KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
      DOCKER_BUILD_ARGS: ${{ secrets.DOCKER_BUILD_ARGS }}
      BUILD_ARGS: ${{ secrets.BUILD_ARGS }}
    with:
      env: ${{ inputs.env }}
      update_version_command: npm version prerelease --preid=rc --no-git-tag-version
      branch: ${{ needs.cutReleaseCandidateTS.outputs.branch }}
      rails: '[[ "$VERSION" =~ "rc" ]]'
      update_version: true
      cloud_deploy: ${{ inputs.cloud_deploy }}
      needs_build: ${{ inputs.needs_build }}
      install_command: ${{ inputs.install_command }}
      skip_deploy: ${{ inputs.skip_deploy }}

  deployReleaseCandidateGo:
    uses: ./.github/workflows/build-deploy-go.yml
    needs: [cutReleaseCandidateGo]
    if: needs.detect-language.outputs.language == 'go'
    secrets:
      DOCKER: ${{ secrets.DOCKER }}
      GH_PAT: ${{ secrets.GH_PAT }}
      KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
      DOCKER_BUILD_ARGS: ${{ secrets.DOCKER_BUILD_ARGS }}
      BUILD_ARGS: ${{ secrets.BUILD_ARGS }}
    with:
      env: ${{ inputs.env }}
      update_version_command: "echo \"v$(semver -i patch $(sed 's/^v//' VERSION))\" > VERSION"
      branch: ${{ needs.cutReleaseCandidateGo.outputs.branch }}
      rails: '[[ ! "$VERSION" =~ "rc" ]]'
      update_version: true
      cloud_deploy: ${{ inputs.cloud_deploy }}
      needs_build: ${{ inputs.needs_build }}
      install_command: ${{ inputs.install_command }}
      skip_deploy: ${{ inputs.skip_deploy }}
      build_command: ${{ inputs.build_command }}
      needs_docker: ${{ inputs.needs_docker }}
      include_chart: ${{ inputs.include_chart }}

