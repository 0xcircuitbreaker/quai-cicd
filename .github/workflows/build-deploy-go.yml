name: Build and Deploy sub-action js
on:
  workflow_call:
    inputs:
      env:
        required: true
        type: string
      update_version_command:
        required: false
        type: string
        default: npm version patch
      rails:
        required: false
        type: string
        default: echo "continuing."
      branch:
        required: false
        type: string
        default: ${{ github.ref }}
      update_version:
        required: true
        type: boolean
        default: true
      cloud_deploy:
        required: true
        type: boolean
        default: false
      needs_build:
        required: true
        type: boolean
      build_command:
        required: false
        type: string
      needs_docker:
        required: false
        type: boolean
        default: false
      install_command:
        required: false
        type: string
      skip_deploy:
        required: false
        type: boolean
        default: false
      include_chart:
          required: false
          type: boolean
          default: false
      tag:
          required: false
          type: boolean
          default: true
      name_override:
        required: false
        type: string

    secrets:
      GH_PAT:
        description: 'needed for github login'
        required: true
      DOCKER:
        description: 'needed for registry login'
        required: false
      KUBE_CONFIG:
        description: 'needed for kube setup'
        required: false
      BUILD_ARGS:
        description: 'needed for build args'
        required: false
      DOCKER_BUILD_ARGS:
        description: 'needed for docker build args'
        required: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Import GPG Key
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
        run: |
          echo "$GPG_PRIVATE_KEY" | gpg --import
          git config --global user.signingkey $GPG_KEY_ID
          git config --global commit.gpgsign true

      - uses: actions/checkout@v3
        with:
          ref: ${{ inputs.branch }}
          ssh-key: ${{ secrets.GH_PAT }}

      - name: Set Repo Name
        run: |
          repo_name=$(basename ${{ github.repository }})
          if [ -n "${{ inputs.name_override }}" ]; then
              repo_name=${{ inputs.name_override }}
          fi
          echo "REPO_NAME=$repo_name" >> $GITHUB_ENV


      - name: Set Repo Name in Camel Case
        run: |
          repo_name=$(basename ${{ github.repository }})
          if [ -n "${{ inputs.name_override }}" ]; then
              repo_name=${{ inputs.name_override }}
          fi
          camel_case_name=$(echo $repo_name | awk -F- '{for(i=2; i<=NF; i++) $i=toupper(substr($i,1,1)) substr($i,2); }1' OFS="")
          echo "CAMEL_CASE_REPO_NAME=$camel_case_name" >> $GITHUB_ENV

      - name: Set up Go 1.21.1
        uses: actions/setup-go@v3
        with:
          go-version: '1.21.1'

      - name: Check Go Version
        run: go version

      - name: Install make
        run: |
            sudo apt-get update
            sudo apt-get install -y make
            make --version

      - name: Install yq
        if: ${{ inputs.update_version && inputs.include_chart }}
        run: sudo snap install yq

      - name: get Version
        run: |
          VERSION_VALUE=$(sudo cat VERSION)
          echo "VERSION=$VERSION_VALUE"
          echo "VERSION=$VERSION_VALUE" >> $GITHUB_ENV

      - name: Sanity Check Branch
        run: ${{ inputs.rails }}

      - name: Sync Chart.yaml version
        if: ${{ inputs.update_version && inputs.include_chart }}
        run: yq eval -i ".appVersion=\"${{ env.VERSION }}\"" ./helm/Chart.yaml

      - name: Sync values.yaml version
        if: ${{ inputs.update_version && inputs.include_chart}}
        run: yq eval -i ".${{ env.CAMEL_CASE_REPO_NAME }}.image.version=\"${{ env.VERSION }}\"" ./helm/values.yaml

      - name: Install Dependencies
        if: ${{ inputs.install_command }}
        run: ${{ inputs.install_command }}

      - name: Build
        if: ${{ inputs.needs_build }}
        run: ${{ inputs.build_command }}

      - name: Debug secrets
        run: |
          echo ${{ secrets.DOCKER }}

      - name: Login to Docker Hub
        if: ${{ inputs.needs_docker }}
        uses: docker/login-action@v2
        with:
          username: quaibuild
          password: ${{ secrets.DOCKER }}

      - name: Build Docker
        if: ${{ inputs.needs_docker }}
        run: |
          if [ -n "${{ secrets.DOCKER_BUILD_ARGS }}" ]; then
            BUILD_ARGS=""
            OLD_IFS=$IFS
            IFS=','
            read -ra ARG_ARRAY <<< "${{ secrets.DOCKER_BUILD_ARGS }}"
            IFS=$OLD_IFS
            for arg in "${ARG_ARRAY[@]}"; do
              BUILD_ARGS+=" --build-arg $arg"
            done
            eval "docker build $BUILD_ARGS -t quainetwork/${{ env.REPO_NAME }}:${{ env.VERSION }} ."
          else
            docker build -t quainetwork/${{ env.REPO_NAME }}:${{ env.VERSION }} .
          fi


      - name: Push to Docker Hub
        if: ${{ inputs.needs_docker }}
        run: docker push quainetwork/${{ env.REPO_NAME }}:${{ env.VERSION }}

      - name: git tag
        if: ${{ inputs.update_version  && inputs.tag }}
        run: git tag ${{ env.VERSION }} && HUSKY=0 git push origin tag ${{ env.VERSION }}

      - uses: stefanzweifel/git-auto-commit-action@v4
        if: ${{ inputs.update_version }}
        with:
          branch: ${{ inputs.branch }}
        env:
          HUSKY: 0

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ inputs.branch }}
          ssh-key: ${{ secrets.GH_PAT }}

      - name: Set Repo Name
        run: |
          repo_name=$(basename ${{ github.repository }})
          if [ -n "${{ inputs.name_override }}" ]; then
              repo_name=${{ inputs.name_override }}
          fi
          echo "REPO_NAME=$repo_name" >> $GITHUB_ENV


      - name: Set Repo Name in Camel Case
        run: |
          repo_name=$(basename ${{ github.repository }})
          if [ -n "${{ inputs.name_override }}" ]; then
              repo_name=${{ inputs.name_override }}
          fi
          camel_case_name=$(echo $repo_name | awk -F- '{for(i=2; i<=NF; i++) $i=toupper(substr($i,1,1)) substr($i,2); }1' OFS="")
          echo "CAMEL_CASE_REPO_NAME=$camel_case_name" >> $GITHUB_ENV


      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20' # This will install the latest stable Node.js version

      - name: Log Node and Npm Versions
        run:  |
          echo node version $(node -v)
          echo npm version $(npm -v)

      - name: install semver globally
        run: npm install -g semver

      - name: Debug deploy config
        run: |
          echo cloud_deploy: ${{ inputs.cloud_deploy }}
          echo skip_deploy: ${{ inputs.skip_deploy }}
          echo env: ${{ inputs.env }}

      - name: Deploy to cloud
        uses: WyriHaximus/github-action-helm3@v2
        if: ${{ inputs.cloud_deploy && !inputs.skip_deploy }}
        id: deploy
        continue-on-error: true
        with:
          exec: helm upgrade ${{ env.REPO_NAME }} ./helm --install --namespace=${{ inputs.env }} --values=./helm/env/${{ inputs.env }}.values.yaml
          kubeconfig: ${{ secrets.KUBE_CONFIG }}

      - name: Deploy to local from bastion
        if: ${{ !inputs.cloud_deploy && !inputs.skip_deploy }}
        continue-on-error: true
        run: |
          echo installing kubectl...
          curl -LO "https://dl.k8s.io/release/v1.25.9/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl
          echo kubectl installed
          echo setting kubeconfig...
          echo "${{ secrets.KUBE_CONFIG }}" > kubeconfig.yaml
          export KUBECONFIG=kubeconfig.yaml
          echo kubeconfig set
          echo testing kubectl connection...
          kubectl get po
          echo clearing bastion helm
          kubectl exec -it $(kubectl get po -n kube-system -l app=bastion -o jsonpath="{.items[0].metadata.name}") -n kube-system -- rm -rf helm
          echo bastion helm cleared
          echo copying helm to bastion...
          kubectl cp -n kube-system ./helm $(kubectl get po -n kube-system -l app=bastion -o jsonpath="{.items[0].metadata.name}"):/helm
          echo helm chart copied to bastion
          echo deploying helm chart from bastion...
          kubectl exec -it $(kubectl get po -n kube-system -l app=bastion -o jsonpath="{.items[0].metadata.name}") -n kube-system -- helm upgrade --install ${{ env.REPO_NAME }} ./helm --namespace=${{ inputs.env }} --values=./helm/env/${{ inputs.env }}.values.yaml 
          echo helm chart deployed!!!
          echo cleaning bastion
          kubectl exec -it $(kubectl get po -n kube-system -l app=bastion -o jsonpath="{.items[0].metadata.name}") -n kube-system -- rm -rf helm
          echo bastion helm cleared
          echo bastion cleaned up 

      - name: Install yq
        if: ${{ inputs.update_version && inputs.include_chart }}
        run: sudo snap install yq

      - name: Update Version
        if: ${{ inputs.update_version }}
        run: |
          ${{ inputs.update_version_command }}

      - name: get Version
        run: |
          VERSION_VALUE=$(sudo cat VERSION)
          echo "VERSION=$VERSION_VALUE"
          echo "VERSION=$VERSION_VALUE" >> $GITHUB_ENV

      - name: Update Chart.yaml version
        if: ${{ inputs.update_version && inputs.include_chart }}
        run: yq eval -P -i ".appVersion=\"${{ env.VERSION }}\"" ./helm/Chart.yaml

      - name: Update values.yaml version
        if: ${{ inputs.update_version && inputs.include_chart }}
        run: yq eval -P -i ".${{ env.CAMEL_CASE_REPO_NAME }}.image.version=\"${{ env.VERSION }}\"" ./helm/values.yaml

      - name: rm kubeconfig
        if: ${{ !inputs.skip_deploy }}
        continue-on-error: true
        run: rm kubeconfig.yaml

      - uses: stefanzweifel/git-auto-commit-action@v4
        if: ${{ inputs.update_version }}
        with:
          branch: ${{ inputs.branch }}
        env:
          HUSKY: 0
